{
  "actions": {
    "CreateTaskFromAction": [
      {
        "document": "",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: CreateTaskFromAction\n<公共请求参数>\n\n\n\n\n{\n\t\"TaskActionId\": 127,\n\t\"TaskInstances\": [\n\t\t\"ins-87bfr32q\"\n\t]\n\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"f0aee8ac-2ed3-4a7f-a25b-f0d7d228dd30\",\n        \"TaskId\": 50\n    }\n}",
        "title": "从动作创建演练"
      }
    ],
    "CreateTaskFromMultiAction": [
      {
        "document": "",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: CreateTaskFromMultiAction\n<公共请求参数>\n\n{\n    \"TaskInstances\": [\n        \"abc\"\n    ],\n    \"TaskTitle\": \"abc\",\n    \"TaskDescription\": \"abc\",\n    \"TaskPauseDuration\": 1,\n    \"TaskAction\": [\n        {\n            \"TaskActionId\": 0,\n            \"TaskActionGeneralConfiguration\": \"abc\",\n            \"TaskActionCustomConfiguration\": \"abc\"\n        }\n    ]\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"f0aee8ac-2ed3-4a7f-a25b-f0d7d228dd30\",\n        \"TaskId\": 50\n    }\n}",
        "title": "示例"
      }
    ],
    "CreateTaskFromTemplate": [
      {
        "document": "通过预创建好的经验模板生成常规化的演练持续使用",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: CreateTaskFromTemplate\n<公共请求参数>\n\n{\n    \"TemplateId\": 689,\n    \"TaskConfig\": {\n        \"TaskTitle\": \"测试演练，关联了实例，修改了演练名称和第一个动作组中第一个动作的动作自定义参数\",\n        \"TaskGroupsConfig\": [\n            {\n                \"TaskGroupInstances\": [\n                    \"ins-xxxxxxxx\"\n                ],\n                \"TaskGroupActionsConfig\": [\n                    {\n                        \"TaskGroupActionOrder\": 1,\n                        \"TaskGroupActionCustomConfiguration\": \"{\\\"timeout\\\":200,\\\"percentage\\\":80}\"\n                    }\n                ]\n            }\n        ]\n    }\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"f0aee8ac-2ed3-4a7f-a25b-f0d7d228dd30\",\n        \"TaskId\": 50\n    }\n}",
        "title": "根据经验模板创建演练"
      }
    ],
    "DeleteTask": [
      {
        "document": "",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DeleteTask\n<公共请求参数>\n\n{\n    \"TaskId\": \"222\"\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"6549ed1a-911f-46dd-b6cd-2c02d5bd180f\"\n    }\n}",
        "title": "删除任务"
      }
    ],
    "DescribeActionFieldConfigList": [
      {
        "document": "",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DescribeActionFieldConfigList\n<公共请求参数>\n\n{\n    \"ObjectTypeId\": \"1\",\n    \"ActionIds\": [\n        \"1\"\n    ]\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"f3433a9a-e8fd-40b9-88e7-dd8b3f1a181f\",\n        \"Common\": [\n            {\n                \"ActionId\": 1,\n                \"ActionName\": \"关机\",\n                \"ConfigDetail\": [\n                    {\n                        \"Type\": \"input\",\n                        \"Lable\": \"动作别名\",\n                        \"Field\": \"AliasTitle\",\n                        \"DefaultValue\": \"\",\n                        \"Config\": \"{}\",\n                        \"Required\": 0,\n                        \"Validate\": \"{}\",\n                        \"Visible\": \"{}\"\n                    },\n                    {\n                        \"Type\": \"number\",\n                        \"Lable\": \"前置等待时间(s)\",\n                        \"Field\": \"PreTimeWait\",\n                        \"DefaultValue\": \"0\",\n                        \"Config\": \"{\\\"max\\\": 86400, \\\"min\\\": 0, \\\"tooltip\\\": \\\"仅限用于自动推进模式\\\"}\",\n                        \"Required\": 1,\n                        \"Validate\": \"{}\",\n                        \"Visible\": \"{}\"\n                    },\n                    {\n                        \"Type\": \"number\",\n                        \"Lable\": \"后置等待时间(s)\",\n                        \"Field\": \"AfterTimeWait\",\n                        \"DefaultValue\": \"0\",\n                        \"Config\": \"{\\\"max\\\": 86400, \\\"min\\\": 0, \\\"tooltip\\\": \\\"仅限用于自动推进模式\\\"}\",\n                        \"Required\": 1,\n                        \"Validate\": \"{}\",\n                        \"Visible\": \"{}\"\n                    },\n                    {\n                        \"Type\": \"number\",\n                        \"Lable\": \"动作超时时间(s)\",\n                        \"Field\": \"ActionTimeout\",\n                        \"DefaultValue\": \"1800\",\n                        \"Config\": \"{\\\"max\\\": 86400, \\\"min\\\": 0, \\\"tooltip\\\": \\\"动作的超时时间\\\"}\",\n                        \"Required\": 1,\n                        \"Validate\": \"{}\",\n                        \"Visible\": \"{}\"\n                    }\n                ]\n            }\n        ],\n        \"Results\": []\n    }\n}",
        "title": "示例"
      }
    ],
    "DescribeActionLibraryList": [
      {
        "document": "动作库列表数据查询",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DescribeActionLibraryList\n<公共请求参数>\n\n{\n    \"Limit\": 10,\n    \"Offset\": 0,\n    \"Filters\": [\n        {\n            \"Keyword\": \"a_type\",\n            \"Values\": [\n                \"1\"\n            ]\n        }\n    ],\n    \"ObjectType\": 1,\n    \"Attribute\": [\n        1\n    ]\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"cZ6m0xYnnDreBNJm\",\n        \"Results\": [\n            {\n                \"ActionName\": \"关机（测试）\",\n                \"Desc\": \"对CVM进行关机操作\",\n                \"ActionType\": \"平台\",\n                \"CreateTime\": \"2023-07-04 11:20:43\",\n                \"Creator\": \"系统\",\n                \"UpdateTime\": \"2023-07-04 11:20:43\",\n                \"RiskDesc\": \"高风险\",\n                \"ActionId\": 1,\n                \"AttributeId\": 1,\n                \"RelationActionId\": 2,\n                \"ActionCommand\": \"调用腾讯云对应产品的API接口\",\n                \"ActionContent\": \"调用云api StopInstances\",\n                \"ActionCommandType\": 1,\n                \"ActionDetail\": \"<p>调用云api <a href=\\\"https://cloud.tencent.com/document/product/213/15743\\\">StopInstances</a>关机</p>\",\n                \"ResourceType\": \"服务器资源\",\n                \"IsAllowed\": true,\n                \"ActionBestCase\": \"https://cloud.tencent.com/document/product/1500/74357\",\n                \"ObjectType\": \"CVM\",\n                \"MetricIdList\": [\n                    614,\n                    615\n                ]\n            },\n            {\n                \"ActionName\": \"开机\",\n                \"Desc\": \"对CVM进行开机操作\",\n                \"ActionType\": \"平台\",\n                \"CreateTime\": \"2022-11-29 18:08:46\",\n                \"Creator\": \"系统\",\n                \"UpdateTime\": \"2022-11-29 18:08:46\",\n                \"RiskDesc\": \"高风险\",\n                \"ActionId\": 2,\n                \"AttributeId\": 2,\n                \"RelationActionId\": 1,\n                \"ActionCommand\": \"调用腾讯云对应产品的API接口\",\n                \"ActionContent\": \"调用云api StartInstances\",\n                \"ActionCommandType\": 1,\n                \"ActionDetail\": \"<p>调用云api <a href=\\\"https://cloud.tencent.com/document/product/213/15735\\\">StartInstances</a>开机</p>\",\n                \"ResourceType\": \"服务器资源\",\n                \"IsAllowed\": true,\n                \"ActionBestCase\": \"\",\n                \"ObjectType\": \"CVM\",\n                \"MetricIdList\": []\n            },\n            {\n                \"ActionName\": \"重启\",\n                \"Desc\": \"重启\",\n                \"ActionType\": \"平台\",\n                \"CreateTime\": \"2023-05-24 15:33:39\",\n                \"Creator\": \"系统\",\n                \"UpdateTime\": \"2023-05-24 15:33:39\",\n                \"RiskDesc\": \"高风险\",\n                \"ActionId\": 3,\n                \"AttributeId\": 1,\n                \"RelationActionId\": 0,\n                \"ActionCommand\": \"调用腾讯云对应产品的API接口\",\n                \"ActionContent\": \"调用云api RebootInstances\",\n                \"ActionCommandType\": 1,\n                \"ActionDetail\": \"<p>调用云api <a href=\\\"https://cloud.tencent.com/document/product/213/15742\\\">RebootInstances</a>重启</p>\",\n                \"ResourceType\": \"服务器资源\",\n                \"IsAllowed\": true,\n                \"ActionBestCase\": \"https://tcloud4api.woa.com/document/product/1607/88863?!preview&!document=1\",\n                \"ObjectType\": \"CVM\",\n                \"MetricIdList\": []\n            },\n            {\n                \"ActionName\": \"CPU利用率高\",\n                \"Desc\": \"使用stress-ng压测工具压测，支持的linux发行版：Centos7.2及以上，CoreOS 1745.5.0及以上，Debian9.0及以上，Ubuntu 16.04.1及以上\",\n                \"ActionType\": \"平台\",\n                \"CreateTime\": \"2022-11-29 18:08:46\",\n                \"Creator\": \"系统\",\n                \"UpdateTime\": \"2022-11-29 18:08:46\",\n                \"RiskDesc\": \"高风险\",\n                \"ActionId\": 4,\n                \"AttributeId\": 1,\n                \"RelationActionId\": 0,\n                \"ActionCommand\": \"#!/bin/bash\\n\\nuser=$(whoami)\\nif [ !$user == 'root' ]\\nthen\\n    sudo -i\\nfi\\n\\nfunction command_exists(){\\n    if command -v $1 > /dev/null 2>&1; then\\n        return 1\\n    else\\n        return 0\\n    fi\\n}\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n\\nos_desc=$(cat /etc/*release)\\n# echo $os_desc\\n\\ndeclare -A os_dic\\nos_dic=([CentOS]=\\\"yum install stress-ng -y\\\" \\\\\\n        [CoreOS]=\\\"docker pull alexeiled/stress-ng\\\" \\\\\\n        [Debian]=\\\"apt-get install -y stress-ng\\\" \\\\\\n        [Ubuntu]=\\\"apt-get install -y stress-ng\\\")\\n\\nos_name='N/A'\\n\\nfor key in $(echo ${!os_dic[*]})\\ndo\\n    if [[ $os_desc =~ $key ]]\\n    then\\n        os_name=$key\\n        echo $key\\n    fi\\ndone\\n\\nif [ $os_name == 'N/A' ]\\nthen\\n    echo \\\"Unsupported Linux distributions\\\"\\n    exit 1\\nfi\\n\\n# os_name=$(cat /etc/*release | awk 'NR==1{print($1)}')\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"installing stress-ng...\\\"\\ncommand_exists stress-ng\\n\\nif [[ $? -eq 0 ]]\\nthen\\n    ${os_dic[$os_name]}\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Checking the installation status...\\\"\\n    command_exists stress-ng\\n    if [[ $? -eq 0 && $os_name != 'CoreOS' ]]\\n    then\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"Fail to install\\\"\\n        exit 1\\n    else\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"stress-ng has already installed\\\"\\n    fi\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"stress-ng has already installed\\\"\\nfi\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"Starting to perform stress test.\\\"\\nif [ $os_name == \\\"CoreOS\\\" ]\\nthen\\n    docker run --rm alexeiled/stress-ng -c 0 -l {{percentage}} --timeout {{timeout}}\\nelse\\n    stress-ng -c 0 -l {{percentage}} --timeout {{timeout}}\\nfi\\n\\nif [[ !$? -eq 0 ]]\\nthen\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"failed\\\"\\n    exit 1\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"completed\\\"\\n    exit 0\\nfi\",\n                \"ActionContent\": \"#!/bin/bash\\n\\nuser=$(whoami)\\nif [ !$user == 'root' ]\\nthen\\n    sudo -i\\nfi\\n\\nfunction command_exists(){\\n    if command -v $1 > /dev/null 2>&1; then\\n        return 1\\n    else\\n        return 0\\n    fi\\n}\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n\\nos_desc=$(cat /etc/*release)\\n# echo $os_desc\\n\\ndeclare -A os_dic\\nos_dic=([CentOS]=\\\"yum install stress-ng -y\\\" \\\\\\n        [CoreOS]=\\\"docker pull alexeiled/stress-ng\\\" \\\\\\n        [Debian]=\\\"apt-get install -y stress-ng\\\" \\\\\\n        [Ubuntu]=\\\"apt-get install -y stress-ng\\\")\\n\\nos_name='N/A'\\n\\nfor key in $(echo ${!os_dic[*]})\\ndo\\n    if [[ $os_desc =~ $key ]]\\n    then\\n        os_name=$key\\n        echo $key\\n    fi\\ndone\\n\\nif [ $os_name == 'N/A' ]\\nthen\\n    echo \\\"Unsupported Linux distributions\\\"\\n    exit 1\\nfi\\n\\n# os_name=$(cat /etc/*release | awk 'NR==1{print($1)}')\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"installing stress-ng...\\\"\\ncommand_exists stress-ng\\n\\nif [[ $? -eq 0 ]]\\nthen\\n    ${os_dic[$os_name]}\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Checking the installation status...\\\"\\n    command_exists stress-ng\\n    if [[ $? -eq 0 && $os_name != 'CoreOS' ]]\\n    then\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"Fail to install\\\"\\n        exit 1\\n    else\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"stress-ng has already installed\\\"\\n    fi\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"stress-ng has already installed\\\"\\nfi\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"Starting to perform stress test.\\\"\\nif [ $os_name == \\\"CoreOS\\\" ]\\nthen\\n    docker run --rm alexeiled/stress-ng -c 0 -l {{percentage}} --timeout {{timeout}}\\nelse\\n    stress-ng -c 0 -l {{percentage}} --timeout {{timeout}}\\nfi\\n\\nif [[ !$? -eq 0 ]]\\nthen\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"failed\\\"\\n    exit 1\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"completed\\\"\\n    exit 0\\nfi\",\n                \"ActionCommandType\": 0,\n                \"ActionDetail\": \"<p>使用tat通道下发stress-ng命令进行压测</p>\\n<p>命令内容：stress-ng -c 0 -l {{percentage}} --timeout {{timeout}}</p>\\n<p><a href=\\\"https://cloud.tencent.com/document/api/1340/52676\\\">tat官方文档</a></p>\\n<p><a href=\\\"https://wiki.ubuntu.com/Kernel/Reference/stress-ng\\\">stress-ng官方文档</a></p>\\n\",\n                \"ResourceType\": \"CPU资源\",\n                \"IsAllowed\": true,\n                \"ActionBestCase\": \"\",\n                \"ObjectType\": \"CVM\",\n                \"MetricIdList\": []\n            },\n            {\n                \"ActionName\": \"内存利用率高\",\n                \"Desc\": \"使用stress-ng压测工具压测，支持的linux发行版：Centos7.2及以上，CoreOS 1745.5.0及以上，Debian9.0及以上，Ubuntu 16.04.1及以上\",\n                \"ActionType\": \"平台\",\n                \"CreateTime\": \"2022-11-29 18:08:46\",\n                \"Creator\": \"系统\",\n                \"UpdateTime\": \"2022-11-29 18:08:46\",\n                \"RiskDesc\": \"高风险\",\n                \"ActionId\": 7,\n                \"AttributeId\": 1,\n                \"RelationActionId\": 0,\n                \"ActionCommand\": \"#!/bin/bash\\n\\nuser=$(whoami)\\nif [ !$user == 'root' ]\\nthen\\n    sudo -i\\nfi\\n\\nfunction command_exists(){\\n    if command -v $1 > /dev/null 2>&1; then\\n        return 1\\n    else\\n        return 0\\n    fi\\n}\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n\\nos_desc=$(cat /etc/*release)\\n# echo $os_desc\\n\\ndeclare -A os_dic\\nos_dic=([CentOS]=\\\"yum install stress-ng -y\\\" \\\\\\n        [CoreOS]=\\\"docker pull alexeiled/stress-ng\\\" \\\\\\n        [Debian]=\\\"apt-get install -y stress-ng\\\" \\\\\\n        [Ubuntu]=\\\"apt-get install -y stress-ng\\\")\\n\\nos_name='N/A'\\n\\nfor key in $(echo ${!os_dic[*]})\\ndo\\n    if [[ $os_desc =~ $key ]]\\n    then\\n        os_name=$key\\n        echo $key\\n    fi\\ndone\\n\\nif [ $os_name == 'N/A' ]\\nthen\\n    echo \\\"Unsupported Linux distributions\\\"\\n    exit 1\\nfi\\n\\n# os_name=$(cat /etc/*release | awk 'NR==1{print($1)}')\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"installing stress-ng...\\\"\\ncommand_exists stress-ng\\n\\nif [[ $? -eq 0 ]]\\nthen\\n    ${os_dic[$os_name]}\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Checking the installation status...\\\"\\n    command_exists stress-ng\\n    if [[ $? -eq 0 && $os_name != 'CoreOS' ]]\\n    then\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"Fail to install\\\"\\n        exit 1\\n    else\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"stress-ng has already installed\\\"\\n    fi\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"stress-ng has already installed\\\"\\nfi\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"Starting to perform stress test\\\"\\nif [ $os_name == \\\"CoreOS\\\" ]\\nthen\\n    docker run --rm alexeiled/stress-ng --vm-bytes $(awk '/MemAvailable/{printf \\\"%d\\\\n\\\", $2 * 0.01*{{percentage}};}' < /proc/meminfo)k --vm-keep -m 1 -t {{timeout}}\\nelse\\n    avaliable_mem=$(awk '/^MemAvailable:/{printf \\\"%d\\\\n\\\", $2;}' < /proc/meminfo)\\n    free_mem=$(awk '/^MemFree:/{printf \\\"%d\\\\n\\\", $2;}' < /proc/meminfo)\\n    buffer=$(awk '/^Buffers:/{printf \\\"%d\\\\n\\\", $2;}' < /proc/meminfo)\\n    cache=$(awk '/^Cached:/{printf \\\"%d\\\\n\\\", $2;}' < /proc/meminfo)\\n    if [ -n \\\"$avaliable_mem\\\" ]\\n    then\\n        stress-ng --vm-bytes $[$avaliable_mem*{{percentage}}/100]k --vm-keep -m 1 -t {{timeout}}\\n    else\\n        stress-ng --vm-bytes $[($free_mem+$buffer+$cache)*{{percentage}}/100]k --vm-keep -m 1 -t {{timeout}}\\n    fi\\nfi\\n\\nif [[ !$? -eq 0 ]]\\nthen\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Failed\\\"\\n    exit 1\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Completed\\\"\\n    exit 0\\nfi\",\n                \"ActionContent\": \"#!/bin/bash\\n\\nuser=$(whoami)\\nif [ !$user == 'root' ]\\nthen\\n    sudo -i\\nfi\\n\\nfunction command_exists(){\\n    if command -v $1 > /dev/null 2>&1; then\\n        return 1\\n    else\\n        return 0\\n    fi\\n}\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n\\nos_desc=$(cat /etc/*release)\\n# echo $os_desc\\n\\ndeclare -A os_dic\\nos_dic=([CentOS]=\\\"yum install stress-ng -y\\\" \\\\\\n        [CoreOS]=\\\"docker pull alexeiled/stress-ng\\\" \\\\\\n        [Debian]=\\\"apt-get install -y stress-ng\\\" \\\\\\n        [Ubuntu]=\\\"apt-get install -y stress-ng\\\")\\n\\nos_name='N/A'\\n\\nfor key in $(echo ${!os_dic[*]})\\ndo\\n    if [[ $os_desc =~ $key ]]\\n    then\\n        os_name=$key\\n        echo $key\\n    fi\\ndone\\n\\nif [ $os_name == 'N/A' ]\\nthen\\n    echo \\\"Unsupported Linux distributions\\\"\\n    exit 1\\nfi\\n\\n# os_name=$(cat /etc/*release | awk 'NR==1{print($1)}')\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"installing stress-ng...\\\"\\ncommand_exists stress-ng\\n\\nif [[ $? -eq 0 ]]\\nthen\\n    ${os_dic[$os_name]}\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Checking the installation status...\\\"\\n    command_exists stress-ng\\n    if [[ $? -eq 0 && $os_name != 'CoreOS' ]]\\n    then\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"Fail to install\\\"\\n        exit 1\\n    else\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"stress-ng has already installed\\\"\\n    fi\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"stress-ng has already installed\\\"\\nfi\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"Starting to perform stress test\\\"\\nif [ $os_name == \\\"CoreOS\\\" ]\\nthen\\n    docker run --rm alexeiled/stress-ng --vm-bytes $(awk '/MemAvailable/{printf \\\"%d\\\\n\\\", $2 * 0.01*{{percentage}};}' < /proc/meminfo)k --vm-keep -m 1 -t {{timeout}}\\nelse\\n    avaliable_mem=$(awk '/^MemAvailable:/{printf \\\"%d\\\\n\\\", $2;}' < /proc/meminfo)\\n    free_mem=$(awk '/^MemFree:/{printf \\\"%d\\\\n\\\", $2;}' < /proc/meminfo)\\n    buffer=$(awk '/^Buffers:/{printf \\\"%d\\\\n\\\", $2;}' < /proc/meminfo)\\n    cache=$(awk '/^Cached:/{printf \\\"%d\\\\n\\\", $2;}' < /proc/meminfo)\\n    if [ -n \\\"$avaliable_mem\\\" ]\\n    then\\n        stress-ng --vm-bytes $[$avaliable_mem*{{percentage}}/100]k --vm-keep -m 1 -t {{timeout}}\\n    else\\n        stress-ng --vm-bytes $[($free_mem+$buffer+$cache)*{{percentage}}/100]k --vm-keep -m 1 -t {{timeout}}\\n    fi\\nfi\\n\\nif [[ !$? -eq 0 ]]\\nthen\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Failed\\\"\\n    exit 1\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Completed\\\"\\n    exit 0\\nfi\",\n                \"ActionCommandType\": 0,\n                \"ActionDetail\": \"<p>使用tat通道下发stress-ng命令进行压测</p>\\n<p>命令内容：stress-ng --vm-bytes $(awk '/MemAvailable/{printf \\\"%d\\\\n\\\", $2 * 0.01*{{percentage}};}' < /proc/meminfo)k --vm-keep -m 1 -t {{timeout}}</p>\\n<p><a href=\\\"https://cloud.tencent.com/document/api/1340/52676\\\">tat官方文档</a></p>\\n<p><a href=\\\"https://wiki.ubuntu.com/Kernel/Reference/stress-ng\\\">stress-ng官方文档</a></p>\",\n                \"ResourceType\": \"内存资源\",\n                \"IsAllowed\": true,\n                \"ActionBestCase\": \"\",\n                \"ObjectType\": \"CVM\",\n                \"MetricIdList\": []\n            },\n            {\n                \"ActionName\": \"磁盘分区使用率高\",\n                \"Desc\": \"使用stress-ng压测工具压测，支持的linux发行版：Centos7.2及以上，CoreOS 1745.5.0及以上，Debian9.0及以上，Ubuntu 16.04.1及以上\",\n                \"ActionType\": \"平台\",\n                \"CreateTime\": \"2022-11-29 18:08:46\",\n                \"Creator\": \"系统\",\n                \"UpdateTime\": \"2022-11-29 18:08:46\",\n                \"RiskDesc\": \"高风险\",\n                \"ActionId\": 8,\n                \"AttributeId\": 1,\n                \"RelationActionId\": 0,\n                \"ActionCommand\": \"#!/bin/bash\\n\\nuser=$(whoami)\\nif [ !$user == 'root' ]\\nthen\\n    sudo -i\\nfi\\n\\nfunction command_exists(){\\n    if command -v $1 > /dev/null 2>&1; then\\n        return 1\\n    else\\n        return 0\\n    fi\\n}\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n\\nos_desc=$(cat /etc/*release)\\n# echo $os_desc\\n\\ndeclare -A os_dic\\nos_dic=([CentOS]=\\\"yum install stress-ng -y\\\" \\\\\\n        [CoreOS]=\\\"docker pull alexeiled/stress-ng\\\" \\\\\\n        [Debian]=\\\"apt-get install -y stress-ng\\\" \\\\\\n        [Ubuntu]=\\\"apt-get install -y stress-ng\\\")\\n\\nos_name='N/A'\\n\\nfor key in $(echo ${!os_dic[*]})\\ndo\\n    if [[ $os_desc =~ $key ]]\\n    then\\n        os_name=$key\\n        echo $key\\n    fi\\ndone\\n\\nif [ $os_name == 'N/A' ]\\nthen\\n    echo \\\"Unsupported Linux distributions\\\"\\n    exit 1\\nfi\\n\\n# os_name=$(cat /etc/*release | awk 'NR==1{print($1)}')\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"installing stress-ng...\\\"\\ncommand_exists stress-ng\\n\\nif [[ $? -eq 0 ]]\\nthen\\n    ${os_dic[$os_name]}\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Checking the installation status...\\\"\\n    command_exists stress-ng\\n    if [[ $? -eq 0 && $os_name != 'CoreOS' ]]\\n    then\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"Fail to install\\\"\\n        exit 1\\n    else\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"stress-ng has already installed\\\"\\n    fi\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"stress-ng has already installed\\\"\\nfi\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"Starting to perform stress test.\\\"\\nif [ $os_name == \\\"CoreOS\\\" ]\\nthen\\n    cd {{dir}} && docker run --rm alexeiled/stress-ng --iomix 1 --iomix-bytes  `df -k {{dir}} | awk 'NR==2{printf(\\\"%d\\\\n\\\", ($3+$4)*0.01*{{percentage}}-$3)}'`k -t {{timeout}}\\nelse\\n    cd {{dir}} && stress-ng --iomix 1 --iomix-bytes  `df -k {{dir}} | awk 'NR==2{printf(\\\"%d\\\\n\\\", ($3+$4)*0.01*{{percentage}}-$3)}'`k -t {{timeout}}\\nfi\\n\\nif [[ !$? -eq 0 ]]\\nthen\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Failed\\\"\\n    exit 1\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Completed\\\"\\n    exit 0\\nfi\",\n                \"ActionContent\": \"#!/bin/bash\\n\\nuser=$(whoami)\\nif [ !$user == 'root' ]\\nthen\\n    sudo -i\\nfi\\n\\nfunction command_exists(){\\n    if command -v $1 > /dev/null 2>&1; then\\n        return 1\\n    else\\n        return 0\\n    fi\\n}\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n\\nos_desc=$(cat /etc/*release)\\n# echo $os_desc\\n\\ndeclare -A os_dic\\nos_dic=([CentOS]=\\\"yum install stress-ng -y\\\" \\\\\\n        [CoreOS]=\\\"docker pull alexeiled/stress-ng\\\" \\\\\\n        [Debian]=\\\"apt-get install -y stress-ng\\\" \\\\\\n        [Ubuntu]=\\\"apt-get install -y stress-ng\\\")\\n\\nos_name='N/A'\\n\\nfor key in $(echo ${!os_dic[*]})\\ndo\\n    if [[ $os_desc =~ $key ]]\\n    then\\n        os_name=$key\\n        echo $key\\n    fi\\ndone\\n\\nif [ $os_name == 'N/A' ]\\nthen\\n    echo \\\"Unsupported Linux distributions\\\"\\n    exit 1\\nfi\\n\\n# os_name=$(cat /etc/*release | awk 'NR==1{print($1)}')\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"installing stress-ng...\\\"\\ncommand_exists stress-ng\\n\\nif [[ $? -eq 0 ]]\\nthen\\n    ${os_dic[$os_name]}\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Checking the installation status...\\\"\\n    command_exists stress-ng\\n    if [[ $? -eq 0 && $os_name != 'CoreOS' ]]\\n    then\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"Fail to install\\\"\\n        exit 1\\n    else\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"stress-ng has already installed\\\"\\n    fi\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"stress-ng has already installed\\\"\\nfi\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"Starting to perform stress test.\\\"\\nif [ $os_name == \\\"CoreOS\\\" ]\\nthen\\n    cd {{dir}} && docker run --rm alexeiled/stress-ng --iomix 1 --iomix-bytes  `df -k {{dir}} | awk 'NR==2{printf(\\\"%d\\\\n\\\", ($3+$4)*0.01*{{percentage}}-$3)}'`k -t {{timeout}}\\nelse\\n    cd {{dir}} && stress-ng --iomix 1 --iomix-bytes  `df -k {{dir}} | awk 'NR==2{printf(\\\"%d\\\\n\\\", ($3+$4)*0.01*{{percentage}}-$3)}'`k -t {{timeout}}\\nfi\\n\\nif [[ !$? -eq 0 ]]\\nthen\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Failed\\\"\\n    exit 1\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Completed\\\"\\n    exit 0\\nfi\",\n                \"ActionCommandType\": 0,\n                \"ActionDetail\": \"<p>使用tat通道下发stress-ng命令进行压测</p>\\n<p>命令内容：stress-ng --iomix 1 --iomix-bytes  `df -k {{dir}} | awk 'NR==2{printf(\\\"%d\\\\n\\\", ($3+$4)*0.01*{{percentage}}-$3)}'`k -t {{timeout}}</p>\\n<p><a href=\\\"https://cloud.tencent.com/document/api/1340/52676\\\">tat官方文档</a></p>\\n<p><a href=\\\"https://wiki.ubuntu.com/Kernel/Reference/stress-ng\\\">stress-ng官方文档</a></p>\\n\",\n                \"ResourceType\": \"磁盘资源\",\n                \"IsAllowed\": true,\n                \"ActionBestCase\": \"\",\n                \"ObjectType\": \"CVM\",\n                \"MetricIdList\": []\n            },\n            {\n                \"ActionName\": \"内核故障\",\n                \"Desc\": \"会触发实例重启\",\n                \"ActionType\": \"平台\",\n                \"CreateTime\": \"2022-11-29 18:08:46\",\n                \"Creator\": \"系统\",\n                \"UpdateTime\": \"2022-11-29 18:08:46\",\n                \"RiskDesc\": \"高风险\",\n                \"ActionId\": 9,\n                \"AttributeId\": 1,\n                \"RelationActionId\": 24,\n                \"ActionCommand\": \"echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\" && echo 'inject kernel error success!' && echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\" && sleep 5 && echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\" && echo c > /proc/sysrq-trigger &\",\n                \"ActionContent\": \"echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\" && echo 'inject kernel error success!' && echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\" && sleep 5 && echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\" && echo c > /proc/sysrq-trigger &\",\n                \"ActionCommandType\": 0,\n                \"ActionDetail\": \"<p>使用tat通道下发内核故障命令</p>\\n<p>命令内容：echo c > /proc/sysrq-trigger</p>\\n<p><a href=\\\"https://cloud.tencent.com/document/api/1340/52676\\\">tat官方文档</a></p>\",\n                \"ResourceType\": \"CPU资源\",\n                \"IsAllowed\": true,\n                \"ActionBestCase\": \"\",\n                \"ObjectType\": \"CVM\",\n                \"MetricIdList\": []\n            },\n            {\n                \"ActionName\": \"磁盘IO负载\",\n                \"Desc\": \"使用stress-ng压测工具压测，支持的linux发行版：Centos7.2及以上，CoreOS 1745.5.0及以上，Debian9.0及以上，Ubuntu 16.04.1及以上\",\n                \"ActionType\": \"平台\",\n                \"CreateTime\": \"2022-11-29 18:08:46\",\n                \"Creator\": \"系统\",\n                \"UpdateTime\": \"2022-11-29 18:08:46\",\n                \"RiskDesc\": \"高风险\",\n                \"ActionId\": 10,\n                \"AttributeId\": 1,\n                \"RelationActionId\": 0,\n                \"ActionCommand\": \"#!/bin/bash\\n\\nuser=$(whoami)\\nif [ !$user == 'root' ]\\nthen\\n    sudo -i\\nfi\\n\\nfunction command_exists(){\\n    if command -v $1 > /dev/null 2>&1; then\\n        return 1\\n    else\\n        return 0\\n    fi\\n}\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n\\nos_desc=$(cat /etc/*release)\\n# echo $os_desc\\n\\ndeclare -A os_dic\\nos_dic=([CentOS]=\\\"yum install stress-ng -y\\\" \\\\\\n        [CoreOS]=\\\"docker pull alexeiled/stress-ng\\\" \\\\\\n        [Debian]=\\\"apt-get install -y stress-ng\\\" \\\\\\n        [Ubuntu]=\\\"apt-get install -y stress-ng\\\")\\n\\nos_name='N/A'\\n\\nfor key in $(echo ${!os_dic[*]})\\ndo\\n    if [[ $os_desc =~ $key ]]\\n    then\\n        os_name=$key\\n        echo $key\\n    fi\\ndone\\n\\nif [ $os_name == 'N/A' ]\\nthen\\n    echo \\\"Unsupported Linux distributions\\\"\\n    exit 1\\nfi\\n\\n# os_name=$(cat /etc/*release | awk 'NR==1{print($1)}')\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"installing stress-ng...\\\"\\ncommand_exists stress-ng\\n\\nif [[ $? -eq 0 ]]\\nthen\\n    ${os_dic[$os_name]}\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Checking the installation status...\\\"\\n    command_exists stress-ng\\n    if [[ $? -eq 0 && $os_name != 'CoreOS' ]]\\n    then\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"Fail to install\\\"\\n        exit 1\\n    else\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"stress-ng has already installed\\\"\\n    fi\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"stress-ng has already installed\\\"\\nfi\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"Starting to perform stress test.\\\"\\nif [ $os_name == \\\"CoreOS\\\" ]\\nthen\\n    docker run --rm alexeiled/stress-ng --vm-bytes {{bytes_num}}{{bytes_unit}} --hdd {{io_process_num}} --vm-keep -t {{timeout}}\\nelse\\n    stress-ng --vm-bytes {{bytes_num}}{{bytes_unit}} --hdd {{io_process_num}} --vm-keep -t {{timeout}}\\nfi\\n\\nif [[ !$? -eq 0 ]]\\nthen\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Failed\\\"\\n    exit 1\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Completed\\\"\\n    exit 0\\nfi\",\n                \"ActionContent\": \"#!/bin/bash\\n\\nuser=$(whoami)\\nif [ !$user == 'root' ]\\nthen\\n    sudo -i\\nfi\\n\\nfunction command_exists(){\\n    if command -v $1 > /dev/null 2>&1; then\\n        return 1\\n    else\\n        return 0\\n    fi\\n}\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n\\nos_desc=$(cat /etc/*release)\\n# echo $os_desc\\n\\ndeclare -A os_dic\\nos_dic=([CentOS]=\\\"yum install stress-ng -y\\\" \\\\\\n        [CoreOS]=\\\"docker pull alexeiled/stress-ng\\\" \\\\\\n        [Debian]=\\\"apt-get install -y stress-ng\\\" \\\\\\n        [Ubuntu]=\\\"apt-get install -y stress-ng\\\")\\n\\nos_name='N/A'\\n\\nfor key in $(echo ${!os_dic[*]})\\ndo\\n    if [[ $os_desc =~ $key ]]\\n    then\\n        os_name=$key\\n        echo $key\\n    fi\\ndone\\n\\nif [ $os_name == 'N/A' ]\\nthen\\n    echo \\\"Unsupported Linux distributions\\\"\\n    exit 1\\nfi\\n\\n# os_name=$(cat /etc/*release | awk 'NR==1{print($1)}')\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"installing stress-ng...\\\"\\ncommand_exists stress-ng\\n\\nif [[ $? -eq 0 ]]\\nthen\\n    ${os_dic[$os_name]}\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Checking the installation status...\\\"\\n    command_exists stress-ng\\n    if [[ $? -eq 0 && $os_name != 'CoreOS' ]]\\n    then\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"Fail to install\\\"\\n        exit 1\\n    else\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"stress-ng has already installed\\\"\\n    fi\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"stress-ng has already installed\\\"\\nfi\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"Starting to perform stress test.\\\"\\nif [ $os_name == \\\"CoreOS\\\" ]\\nthen\\n    docker run --rm alexeiled/stress-ng --vm-bytes {{bytes_num}}{{bytes_unit}} --hdd {{io_process_num}} --vm-keep -t {{timeout}}\\nelse\\n    stress-ng --vm-bytes {{bytes_num}}{{bytes_unit}} --hdd {{io_process_num}} --vm-keep -t {{timeout}}\\nfi\\n\\nif [[ !$? -eq 0 ]]\\nthen\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Failed\\\"\\n    exit 1\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Completed\\\"\\n    exit 0\\nfi\",\n                \"ActionCommandType\": 0,\n                \"ActionDetail\": \"<p>使用tat通道下发stress-ng命令进行压测</p>\\n<p>命令内容：stress-ng --vm-bytes {{bytes_num}}{{bytes_unit}} --hdd {{io_process_num}} --vm-keep -t {{timeout}}</p>\\n<p><a href=\\\"https://cloud.tencent.com/document/api/1340/52676\\\">tat官方文档</a></p>\",\n                \"ResourceType\": \"IO资源\",\n                \"IsAllowed\": true,\n                \"ActionBestCase\": \"\",\n                \"ObjectType\": \"CVM\",\n                \"MetricIdList\": []\n            },\n            {\n                \"ActionName\": \"内存OOM\",\n                \"Desc\": \"使用stress-ng压测工具压测，支持的linux发行版：Centos7.2及以上，CoreOS 1745.5.0及以上，Debian9.0及以上，Ubuntu 16.04.1及以上\",\n                \"ActionType\": \"平台\",\n                \"CreateTime\": \"2023-07-04 11:20:43\",\n                \"Creator\": \"系统\",\n                \"UpdateTime\": \"2023-07-04 11:20:43\",\n                \"RiskDesc\": \"高风险\",\n                \"ActionId\": 11,\n                \"AttributeId\": 1,\n                \"RelationActionId\": 0,\n                \"ActionCommand\": \"#!/bin/bash\\n\\nuser=$(whoami)\\nif [ !$user == 'root' ]\\nthen\\n    sudo -i\\nfi\\n\\nfunction command_exists(){\\n    if command -v $1 > /dev/null 2>&1; then\\n        return 1\\n    else\\n        return 0\\n    fi\\n}\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n\\nos_desc=$(cat /etc/*release)\\n# echo $os_desc\\n\\ndeclare -A os_dic\\nos_dic=([CentOS]=\\\"yum install stress-ng -y\\\" \\\\\\n        [CoreOS]=\\\"docker pull alexeiled/stress-ng\\\" \\\\\\n        [Debian]=\\\"apt-get install -y stress-ng\\\" \\\\\\n        [Ubuntu]=\\\"apt-get install -y stress-ng\\\")\\n\\nos_name='N/A'\\n\\nfor key in $(echo ${!os_dic[*]})\\ndo\\n    if [[ $os_desc =~ $key ]]\\n    then\\n        os_name=$key\\n        echo $key\\n    fi\\ndone\\n\\nif [ $os_name == 'N/A' ]\\nthen\\n    echo \\\"Unsupported Linux distributions\\\"\\n    exit 1\\nfi\\n\\n# os_name=$(cat /etc/*release | awk 'NR==1{print($1)}')\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"installing stress-ng...\\\"\\ncommand_exists stress-ng\\n\\nif [[ $? -eq 0 ]]\\nthen\\n    ${os_dic[$os_name]}\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Checking the installation status...\\\"\\n    command_exists stress-ng\\n    if [[ $? -eq 0 && $os_name != 'CoreOS' ]]\\n    then\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"Fail to install\\\"\\n        exit 1\\n    else\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"stress-ng has already installed\\\"\\n    fi\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"stress-ng has already installed\\\"\\nfi\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"Starting to perform stress test.\\\"\\nif [ $os_name == \\\"CoreOS\\\" ]\\nthen\\n    docker run --rm alexeiled/stress-ng --bigheap 10 --bigheap-growth 4K -t {{timeout}}\\nelse\\n    stress-ng --bigheap 10 --bigheap-growth 4K -t {{timeout}}\\nfi\\necho \\\"Completed\\\"\\n\\n\",\n                \"ActionContent\": \"#!/bin/bash\\n\\nuser=$(whoami)\\nif [ !$user == 'root' ]\\nthen\\n    sudo -i\\nfi\\n\\nfunction command_exists(){\\n    if command -v $1 > /dev/null 2>&1; then\\n        return 1\\n    else\\n        return 0\\n    fi\\n}\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n\\nos_desc=$(cat /etc/*release)\\n# echo $os_desc\\n\\ndeclare -A os_dic\\nos_dic=([CentOS]=\\\"yum install stress-ng -y\\\" \\\\\\n        [CoreOS]=\\\"docker pull alexeiled/stress-ng\\\" \\\\\\n        [Debian]=\\\"apt-get install -y stress-ng\\\" \\\\\\n        [Ubuntu]=\\\"apt-get install -y stress-ng\\\")\\n\\nos_name='N/A'\\n\\nfor key in $(echo ${!os_dic[*]})\\ndo\\n    if [[ $os_desc =~ $key ]]\\n    then\\n        os_name=$key\\n        echo $key\\n    fi\\ndone\\n\\nif [ $os_name == 'N/A' ]\\nthen\\n    echo \\\"Unsupported Linux distributions\\\"\\n    exit 1\\nfi\\n\\n# os_name=$(cat /etc/*release | awk 'NR==1{print($1)}')\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"installing stress-ng...\\\"\\ncommand_exists stress-ng\\n\\nif [[ $? -eq 0 ]]\\nthen\\n    ${os_dic[$os_name]}\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"Checking the installation status...\\\"\\n    command_exists stress-ng\\n    if [[ $? -eq 0 && $os_name != 'CoreOS' ]]\\n    then\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"Fail to install\\\"\\n        exit 1\\n    else\\n        echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n        echo \\\"stress-ng has already installed\\\"\\n    fi\\nelse\\n    echo -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\n    echo \\\"stress-ng has already installed\\\"\\nfi\\n\\necho -e \\\"[\\\"`date +\\\"%Y-%m-%d %H:%M:%S\\\"`\\\"] \\\\c\\\"\\necho \\\"Starting to perform stress test.\\\"\\nif [ $os_name == \\\"CoreOS\\\" ]\\nthen\\n    docker run --rm alexeiled/stress-ng --bigheap 10 --bigheap-growth 4K -t {{timeout}}\\nelse\\n    stress-ng --bigheap 10 --bigheap-growth 4K -t {{timeout}}\\nfi\\necho \\\"Completed\\\"\\n\\n\",\n                \"ActionCommandType\": 0,\n                \"ActionDetail\": \"<p>使用tat通道下发stress-ng命令进行压测</p>\\n<p>命令内容：stress-ng --bigheap 10 --bigheap-growth 4K -t {{timeout}}</p>\\n<p><a href=\\\"https://cloud.tencent.com/document/api/1340/52676\\\">tat官方文档</a></p>\",\n                \"ResourceType\": \"内存资源\",\n                \"IsAllowed\": true,\n                \"ActionBestCase\": \"https://cloud.tencent.com/document/product/1500/81504\",\n                \"ObjectType\": \"CVM\",\n                \"MetricIdList\": []\n            },\n            {\n                \"ActionName\": \"空操作\",\n                \"Desc\": \"空操作，用于测试流程，不做实际注入操作\",\n                \"ActionType\": \"平台\",\n                \"CreateTime\": \"2022-11-29 18:08:46\",\n                \"Creator\": \"系统\",\n                \"UpdateTime\": \"2022-11-29 18:08:46\",\n                \"RiskDesc\": \"低风险\",\n                \"ActionId\": 12,\n                \"AttributeId\": 1,\n                \"RelationActionId\": 13,\n                \"ActionCommand\": \"调用腾讯云对应产品的API接口\",\n                \"ActionContent\": \"空操作\",\n                \"ActionCommandType\": 1,\n                \"ActionDetail\": null,\n                \"ResourceType\": \"其他\",\n                \"IsAllowed\": true,\n                \"ActionBestCase\": \"\",\n                \"ObjectType\": \"CVM\",\n                \"MetricIdList\": []\n            }\n        ],\n        \"Total\": 45\n    }\n}",
        "title": "动作库列表查询"
      }
    ],
    "DescribeObjectTypeList": [
      {
        "document": "",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DescribeObjectTypeList\n<公共请求参数>\n\n{}",
        "output": "{\n    \"Response\": {\n        \"ObjectTypeList\": [\n            {\n                \"ObjectTypeId\": 0,\n                \"ObjectTypeTitle\": \"abc\",\n                \"ObjectTypeLevelOne\": \"abc\",\n                \"ObjectTypeParams\": {\n                    \"Key\": \"abc\",\n                    \"Fields\": [\n                        {\n                            \"Key\": \"abc\",\n                            \"Header\": \"abc\",\n                            \"Transfer\": \"abc\",\n                            \"JsonParse\": \"abc\"\n                        }\n                    ]\n                },\n                \"ObjectTypeJsonParse\": {\n                    \"NameSpace\": \"abc\",\n                    \"WorkloadName\": \"abc\"\n                }\n            }\n        ],\n        \"RequestId\": \"abc\"\n    }\n}",
        "title": "请求对象类型列表"
      }
    ],
    "DescribeTask": [
      {
        "document": "",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DescribeTask\n<公共请求参数>\n\n{\n    \"TaskId\": 0\n}",
        "output": "{\n    \"Response\": {\n        \"ReportInfo\": null,\n        \"RequestId\": \"68da5328-ff1f-4320-92c0-a67e65c8a298\",\n        \"Task\": {\n            \"AlarmPolicy\": [],\n            \"ApmServiceList\": [\n                {\n                    \"InstanceId\": \"test-ins\",\n                    \"RegionId\": 1,\n                    \"ServiceNameList\": [\n                        \"test-service\"\n                    ]\n                }\n            ],\n            \"ApplicationId\": \"\",\n            \"ApplicationName\": \"\",\n            \"Tags\": [],\n            \"TaskCreateTime\": \"2023-10-09 10:55:18\",\n            \"TaskDescription\": \"测试\",\n            \"TaskEndTime\": null,\n            \"TaskExpect\": null,\n            \"TaskGroups\": [\n                {\n                    \"ObjectTypeId\": 1,\n                    \"TaskGroupActions\": [\n                        {\n                            \"ActionApiType\": 1,\n                            \"ActionAttribute\": 1,\n                            \"ActionId\": 1,\n                            \"ActionRisk\": \"高风险\",\n                            \"ActionTitle\": \"关机（测试）\",\n                            \"ActionType\": \"平台\",\n                            \"IsExecuteRedo\": false,\n                            \"TaskGroupActionCreateTime\": \"2023-10-09 10:55:18\",\n                            \"TaskGroupActionCustomConfiguration\": \"{}\",\n                            \"TaskGroupActionExecuteId\": null,\n                            \"TaskGroupActionExecuteTime\": null,\n                            \"TaskGroupActionGeneralConfiguration\": \"{\\\"AliasTitle\\\": \\\"\\\", \\\"PreTimeWait\\\": 0, \\\"ActionTimeout\\\": 1800, \\\"AfterTimeWait\\\": 0}\",\n                            \"TaskGroupActionId\": 13785,\n                            \"TaskGroupActionOrder\": 1,\n                            \"TaskGroupActionRandomId\": 457181,\n                            \"TaskGroupActionRecoverId\": 355514,\n                            \"TaskGroupActionStatus\": 2001,\n                            \"TaskGroupActionStatusType\": 0,\n                            \"TaskGroupActionUpdateTime\": \"2023-10-09 10:55:18\",\n                            \"TaskGroupInstances\": []\n                        },\n                        {\n                            \"ActionApiType\": 1,\n                            \"ActionAttribute\": 2,\n                            \"ActionId\": 2,\n                            \"ActionRisk\": \"高风险\",\n                            \"ActionTitle\": \"开机\",\n                            \"ActionType\": \"平台\",\n                            \"IsExecuteRedo\": false,\n                            \"TaskGroupActionCreateTime\": \"2023-10-09 10:55:18\",\n                            \"TaskGroupActionCustomConfiguration\": \"{}\",\n                            \"TaskGroupActionExecuteId\": 457181,\n                            \"TaskGroupActionExecuteTime\": null,\n                            \"TaskGroupActionGeneralConfiguration\": \"{\\\"PreTimeWait\\\": 0, \\\"ActionTimeout\\\": 1800, \\\"AfterTimeWait\\\": 0}\",\n                            \"TaskGroupActionId\": 13786,\n                            \"TaskGroupActionOrder\": 2,\n                            \"TaskGroupActionRandomId\": 355514,\n                            \"TaskGroupActionRecoverId\": null,\n                            \"TaskGroupActionStatus\": 2001,\n                            \"TaskGroupActionStatusType\": 0,\n                            \"TaskGroupActionUpdateTime\": \"2023-10-09 10:55:18\",\n                            \"TaskGroupInstances\": []\n                        }\n                    ],\n                    \"TaskGroupCreateTime\": \"2023-10-09 10:55:18\",\n                    \"TaskGroupDescription\": \"1\",\n                    \"TaskGroupDiscardInstanceList\": [],\n                    \"TaskGroupId\": 6454,\n                    \"TaskGroupInstanceList\": [\n                        \"ins-knq6h3r8\",\n                        \"ins-61eitwrk\",\n                        \"ins-d2e45nba\"\n                    ],\n                    \"TaskGroupInstancesExecuteRule\": [\n                        {\n                            \"TaskGroupInstancesExecuteMode\": 3,\n                            \"TaskGroupInstancesExecuteNum\": 2,\n                            \"TaskGroupInstancesExecutePercent\": 100\n                        }\n                    ],\n                    \"TaskGroupMode\": 1,\n                    \"TaskGroupOrder\": 1,\n                    \"TaskGroupSelectedInstanceList\": [],\n                    \"TaskGroupTitle\": \"1\",\n                    \"TaskGroupUpdateTime\": \"2023-10-09 10:55:18\"\n                }\n            ],\n            \"TaskId\": 5417,\n            \"TaskMode\": 1,\n            \"TaskMonitors\": [\n                {\n                    \"InstancesIds\": [\n                        \"ins-knq6h3r8\",\n                        \"ins-61eitwrk\",\n                        \"ins-d2e45nba\"\n                    ],\n                    \"MetricChineseName\": \"CPU使用率\",\n                    \"MetricId\": 614,\n                    \"MetricName\": \"CpuUsage\",\n                    \"TaskMonitorId\": 5850,\n                    \"TaskMonitorObjectTypeId\": 1,\n                    \"Unit\": \"%\"\n                }\n            ],\n            \"TaskOwnerUin\": \"700000174829\",\n            \"TaskPauseDuration\": 60,\n            \"TaskPlanId\": null,\n            \"TaskPlanTitle\": null,\n            \"TaskPolicy\": null,\n            \"TaskProtectStrategy\": null,\n            \"TaskRegionId\": 1,\n            \"TaskStartTime\": null,\n            \"TaskStatus\": 1001,\n            \"TaskStatusType\": 0,\n            \"TaskSummary\": null,\n            \"TaskTag\": \"\",\n            \"TaskTitle\": \"测试\",\n            \"TaskUpdateTime\": \"2023-10-09 10:55:18\"\n        }\n    }\n}",
        "title": "查询演练任务"
      }
    ],
    "DescribeTaskExecuteLogs": [
      {
        "document": "",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DescribeTaskExecuteLogs\n<公共请求参数>\n\n{\n    \"Limit\": \"10\",\n    \"TaskId\": \"387\",\n    \"Offset\": \"0\"\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"ef03a439-2337-441b-9d53-89b618674c98\",\n        \"LogMessage\": []\n    }\n}",
        "title": "示例"
      }
    ],
    "DescribeTaskList": [
      {
        "document": "查询演练列表",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DescribeTaskList\n<公共请求参数>\n\n{\n    \"Limit\": \"10\",\n    \"TaskTag\": [\n        \"飞扬\"\n    ],\n    \"Offset\": \"0\"\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"47e12dca-fa37-49b4-86e1-d7d3d7674640\",\n        \"TaskList\": [\n            {\n                \"TaskId\": 2,\n                \"TaskTitle\": \"广州二区-关机\",\n                \"TaskDescription\": \"广州一区-关机\",\n                \"TaskTag\": \"飞扬\",\n                \"TaskStatus\": 1002,\n                \"TaskCreateTime\": \"2021-08-14 00:37:34\",\n                \"TaskUpdateTime\": \"2021-09-18 19:18:28\",\n                \"TaskPreCheckStatus\": 0,\n                \"TaskPreCheckSuccess\": false\n            }\n        ],\n        \"Total\": 1\n    }\n}",
        "title": "查询演练列表"
      },
      {
        "document": "查询演练列表(含预检状态信息)",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DescribeTaskList\n<公共请求参数>\n\n{\n    \"Limit\": \"2\",\n    \"Offset\": \"0\"\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"597dbef8-fcf3-46c2-9561-f87694052606\",\n        \"TaskList\": [\n            {\n                \"TaskId\": 3077,\n                \"TaskTitle\": \"演练预检测试\",\n                \"TaskDescription\": \"演练预检测试\",\n                \"TaskTag\": \"\",\n                \"TaskStatus\": 1001,\n                \"TaskCreateTime\": \"2022-09-19 12:57:22\",\n                \"TaskUpdateTime\": \"2022-09-19 12:57:22\",\n                \"TaskPreCheckStatus\": 2,\n                \"TaskPreCheckSuccess\": false\n            },\n            {\n                \"TaskId\": 3076,\n                \"TaskTitle\": \"【公有云】Mongo节点故障\",\n                \"TaskDescription\": \"【公有云】Mongo节点故障\",\n                \"TaskTag\": \"\",\n                \"TaskStatus\": 1003,\n                \"TaskCreateTime\": \"2022-09-19 11:09:50\",\n                \"TaskUpdateTime\": \"2022-09-19 12:17:49\",\n                \"TaskPreCheckStatus\": 0,\n                \"TaskPreCheckSuccess\": false\n            }\n        ],\n        \"Total\": 2450\n    }\n}",
        "title": "查询演练列表(含预检状态信息)"
      }
    ],
    "DescribeTaskPolicyTriggerLog": [
      {
        "document": "1",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DescribeTaskPolicyTriggerLog\n<公共请求参数>\n\n{\n    \"TaskId\": 5491,\n    \"Page\": 1,\n    \"PageSize\": 11\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"1bba6839-682a-4123-9728-ec3fc141235b\",\n        \"TriggerLogs\": [\n            {\n                \"Content\": \"触发护栏测试内容-恢复i\",\n                \"CreatTime\": \"2023-11-14 12:51:33\",\n                \"Name\": \"触发护栏测试-恢复\",\n                \"TaskId\": 5491,\n                \"TriggerType\": 1\n            },\n            {\n                \"Content\": \"触发护栏测试内容\",\n                \"CreatTime\": \"2023-11-14 12:37:20\",\n                \"Name\": \"触发护栏测试\",\n                \"TaskId\": 5491,\n                \"TriggerType\": 0\n            }\n        ]\n    }\n}",
        "title": "1"
      }
    ],
    "DescribeTemplate": [
      {
        "document": "查询经验",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DescribeTemplate\n<公共请求参数>\n\n{\n    \"TemplateId\": 1175\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"e5cf31b7-d530-4bce-8836-4c227b463b31\",\n        \"Template\": {\n            \"AlarmPolicy\": [],\n            \"ApmServiceList\": [],\n            \"Tags\": [],\n            \"TemplateCreateTime\": \"2023-10-09 11:03:31\",\n            \"TemplateDescription\": \"测试\",\n            \"TemplateGroups\": [\n                {\n                    \"CreateTime\": \"2023-10-09 11:03:31\",\n                    \"Description\": \"测试\",\n                    \"Mode\": 1,\n                    \"ObjectTypeId\": 1,\n                    \"Order\": 1,\n                    \"TemplateGroupActions\": [\n                        {\n                            \"ActionApiType\": 1,\n                            \"ActionAttribute\": 1,\n                            \"ActionId\": 1,\n                            \"ActionTitle\": \"关机（测试）\",\n                            \"ActionType\": \"平台\",\n                            \"CreateTime\": \"2023-10-09 11:03:31\",\n                            \"CustomConfiguration\": \"{}\",\n                            \"ExecuteId\": null,\n                            \"GeneralConfiguration\": \"{\\\"AliasTitle\\\": \\\"\\\", \\\"PreTimeWait\\\": 0, \\\"ActionTimeout\\\": 1800, \\\"AfterTimeWait\\\": 0}\",\n                            \"Order\": 1,\n                            \"RandomId\": 368448,\n                            \"RecoverId\": 232618,\n                            \"TemplateGroupActionId\": 3982,\n                            \"UpdateTime\": \"2023-10-09 11:03:31\"\n                        },\n                        {\n                            \"ActionApiType\": 1,\n                            \"ActionAttribute\": 2,\n                            \"ActionId\": 2,\n                            \"ActionTitle\": \"开机\",\n                            \"ActionType\": \"平台\",\n                            \"CreateTime\": \"2023-10-09 11:03:31\",\n                            \"CustomConfiguration\": \"{}\",\n                            \"ExecuteId\": 368448,\n                            \"GeneralConfiguration\": \"{\\\"PreTimeWait\\\": 0, \\\"ActionTimeout\\\": 1800, \\\"AfterTimeWait\\\": 0}\",\n                            \"Order\": 2,\n                            \"RandomId\": 232618,\n                            \"RecoverId\": null,\n                            \"TemplateGroupActionId\": 3983,\n                            \"UpdateTime\": \"2023-10-09 11:03:31\"\n                        }\n                    ],\n                    \"TemplateGroupId\": 1659,\n                    \"Title\": \"测试\",\n                    \"UpdateTime\": \"2023-10-09 11:03:31\"\n                }\n            ],\n            \"TemplateId\": 1175,\n            \"TemplateIsUsed\": 1,\n            \"TemplateMode\": 1,\n            \"TemplateMonitors\": [\n                {\n                    \"MetricChineseName\": \"CPU使用率\",\n                    \"MetricId\": 614,\n                    \"MetricName\": \"CpuUsage\",\n                    \"MonitorId\": 2173,\n                    \"ObjectTypeId\": 1\n                }\n            ],\n            \"TemplateOwnerUin\": \"700000174829\",\n            \"TemplatePauseDuration\": 60,\n            \"TemplatePolicy\": null,\n            \"TemplateRegionId\": 1,\n            \"TemplateSource\": 0,\n            \"TemplateTag\": \"\",\n            \"TemplateTitle\": \"测试\",\n            \"TemplateUpdateTime\": \"2023-10-09 11:03:31\"\n        }\n    }\n}",
        "title": "查询经验"
      }
    ],
    "DescribeTemplateList": [
      {
        "document": "查询经验库列表",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DescribeTemplateList\n<公共请求参数>\n\n{\n    \"Limit\": \"10\",\n    \"Offset\": \"0\"\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"0c06dc9d-1e90-4062-a038-74abf2bbd43d\",\n        \"TemplateList\": [\n            {\n                \"TemplateId\": 511,\n                \"TemplateTitle\": \"测试经验\",\n                \"TemplateDescription\": \"测试\",\n                \"TemplateTag\": null,\n                \"TemplateIsUsed\": 1,\n                \"TemplateCreateTime\": \"2021-10-12 17:28:13\",\n                \"TemplateUpdateTime\": \"2021-10-12 17:48:16\",\n                \"TemplateUsedNum\": 0\n            },\n            {\n                \"TemplateId\": 509,\n                \"TemplateTitle\": \"test\",\n                \"TemplateDescription\": \"test\",\n                \"TemplateTag\": \"test\",\n                \"TemplateIsUsed\": 2,\n                \"TemplateCreateTime\": \"2021-09-28 15:38:00\",\n                \"TemplateUpdateTime\": \"2021-10-11 16:26:45\",\n                \"TemplateUsedNum\": 0\n            }\n        ],\n        \"Total\": 2\n    }\n}",
        "title": "经验库列表"
      },
      {
        "document": "查询经验列表",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: DescribeTemplateList\n<公共请求参数>\n\n{\n    \"Limit\": 10,\n    \"Offset\": 1\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"6775138e-92c5-40cb-ab0e-a61a5c63b5fa\",\n        \"TemplateList\": [\n            {\n                \"TemplateCreateTime\": \"2023-06-06 15:05:18\",\n                \"TemplateDescription\": \"3\",\n                \"TemplateId\": 914,\n                \"TemplateIsUsed\": 1,\n                \"TemplateSource\": 0,\n                \"TemplateTag\": \"\",\n                \"TemplateTitle\": \"3\",\n                \"TemplateUpdateTime\": \"2023-06-06 15:05:18\",\n                \"TemplateUsedNum\": 0\n            },\n            {\n                \"TemplateCreateTime\": \"2023-06-05 14:43:42\",\n                \"TemplateDescription\": \"从接入层、逻辑层、数据层模拟单AZ故障，进而验证架构跨可用区容灾的有效性\",\n                \"TemplateId\": 913,\n                \"TemplateIsUsed\": 1,\n                \"TemplateSource\": 1,\n                \"TemplateTag\": \"\",\n                \"TemplateTitle\": \"跨可用区容灾演练\",\n                \"TemplateUpdateTime\": \"2023-06-05 14:43:42\",\n                \"TemplateUsedNum\": 0\n            },\n            {\n                \"TemplateCreateTime\": \"2023-06-05 14:42:31\",\n                \"TemplateDescription\": \"从接入层、逻辑层、数据层模拟单AZ故障，进而验证架构跨可用区容灾的有效性\",\n                \"TemplateId\": 912,\n                \"TemplateIsUsed\": 1,\n                \"TemplateSource\": 1,\n                \"TemplateTag\": \"\",\n                \"TemplateTitle\": \"跨可用区容灾演练\",\n                \"TemplateUpdateTime\": \"2023-06-05 14:42:31\",\n                \"TemplateUsedNum\": 0\n            },\n            {\n                \"TemplateCreateTime\": \"2023-06-05 11:48:02\",\n                \"TemplateDescription\": \"从接入层、逻辑层、数据层模拟单AZ故障，进而验证架构跨可用区容灾的有效性\",\n                \"TemplateId\": 910,\n                \"TemplateIsUsed\": 1,\n                \"TemplateSource\": 1,\n                \"TemplateTag\": \"\",\n                \"TemplateTitle\": \"跨可用区容灾演练\",\n                \"TemplateUpdateTime\": \"2023-06-05 11:48:02\",\n                \"TemplateUsedNum\": 0\n            },\n            {\n                \"TemplateCreateTime\": \"2023-06-05 11:48:02\",\n                \"TemplateDescription\": \"从接入层、逻辑层、数据层模拟单AZ故障，进而验证架构跨可用区容灾的有效性\",\n                \"TemplateId\": 911,\n                \"TemplateIsUsed\": 1,\n                \"TemplateSource\": 1,\n                \"TemplateTag\": \"\",\n                \"TemplateTitle\": \"跨可用区容灾演练\",\n                \"TemplateUpdateTime\": \"2023-06-05 11:48:02\",\n                \"TemplateUsedNum\": 0\n            },\n            {\n                \"TemplateCreateTime\": \"2023-06-02 17:38:34\",\n                \"TemplateDescription\": \"从接入层、逻辑层、数据层模拟单AZ故障，进而验证架构跨可用区容灾的有效性\",\n                \"TemplateId\": 904,\n                \"TemplateIsUsed\": 1,\n                \"TemplateSource\": 1,\n                \"TemplateTag\": \"\",\n                \"TemplateTitle\": \"跨可用区容灾演练\",\n                \"TemplateUpdateTime\": \"2023-06-02 17:38:34\",\n                \"TemplateUsedNum\": 0\n            },\n            {\n                \"TemplateCreateTime\": \"2023-06-02 17:38:34\",\n                \"TemplateDescription\": \"从接入层、逻辑层、数据层模拟单AZ故障，进而验证架构跨可用区容灾的有效性\",\n                \"TemplateId\": 905,\n                \"TemplateIsUsed\": 1,\n                \"TemplateSource\": 1,\n                \"TemplateTag\": \"\",\n                \"TemplateTitle\": \"跨可用区容灾演练\",\n                \"TemplateUpdateTime\": \"2023-06-02 17:38:34\",\n                \"TemplateUsedNum\": 0\n            },\n            {\n                \"TemplateCreateTime\": \"2023-06-02 17:38:34\",\n                \"TemplateDescription\": \"从接入层、逻辑层、数据层模拟单AZ故障，进而验证架构跨可用区容灾的有效性\",\n                \"TemplateId\": 906,\n                \"TemplateIsUsed\": 1,\n                \"TemplateSource\": 1,\n                \"TemplateTag\": \"\",\n                \"TemplateTitle\": \"跨可用区容灾演练\",\n                \"TemplateUpdateTime\": \"2023-06-02 17:38:34\",\n                \"TemplateUsedNum\": 0\n            },\n            {\n                \"TemplateCreateTime\": \"2023-06-02 17:38:34\",\n                \"TemplateDescription\": \"从接入层、逻辑层、数据层模拟单AZ故障，进而验证架构跨可用区容灾的有效性\",\n                \"TemplateId\": 907,\n                \"TemplateIsUsed\": 1,\n                \"TemplateSource\": 1,\n                \"TemplateTag\": \"\",\n                \"TemplateTitle\": \"跨可用区容灾演练\",\n                \"TemplateUpdateTime\": \"2023-06-02 17:38:34\",\n                \"TemplateUsedNum\": 0\n            },\n            {\n                \"TemplateCreateTime\": \"2023-06-02 17:38:34\",\n                \"TemplateDescription\": \"从接入层、逻辑层、数据层模拟单AZ故障，进而验证架构跨可用区容灾的有效性\",\n                \"TemplateId\": 908,\n                \"TemplateIsUsed\": 2,\n                \"TemplateSource\": 1,\n                \"TemplateTag\": \"\",\n                \"TemplateTitle\": \"跨可用区容灾演练\",\n                \"TemplateUpdateTime\": \"2023-06-13 16:30:37\",\n                \"TemplateUsedNum\": 0\n            }\n        ],\n        \"Total\": 43\n    }\n}",
        "title": "查询经验列表"
      }
    ],
    "ExecuteTask": [
      {
        "document": "",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: ExecuteTask\n<公共请求参数>\n\n{\n    \"TaskId\": \"222\"\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"46924e75-a149-4130-aac0-853dbf0abea9\"\n    }\n}",
        "title": "执行任务"
      }
    ],
    "ExecuteTaskInstance": [
      {
        "document": "",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: ExecuteTaskInstance\n<公共请求参数>\n\n{\n    \"TaskId\": \"222\",\n    \"TaskActionId\": \"1111\",\n    \"TaskInstanceIds\": [\n        111,\n        222,\n        33\n    ],\n    \"IsOperateAll\": true,\n    \"ActionType\": 1,\n    \"TaskGroupId\": 12\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"6549ed1a-911f-46dd-b6cd-2c02d5bd180f\"\n    }\n}",
        "title": "示例"
      }
    ],
    "ModifyTaskRunStatus": [
      {
        "document": "",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: ModifyTaskRunStatus\n<公共请求参数>\n\n{\n    \"Status\": \"1002\",\n    \"TaskId\": \"1698\"\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"8e9a0777-ff96-4020-8aec-6802d8103689\"\n    }\n}",
        "title": "示例1"
      },
      {
        "document": "",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: ModifyTaskRunStatus\n<公共请求参数>\n\n{\n    \"Status\": \"1004\",\n    \"IsExpect\": true,\n    \"TaskId\": \"222\",\n    \"Summary\": \"演习结论\"\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"e38eca72-e4ae-4a86-9696-7df399e672bd\"\n    }\n}",
        "title": "终止演练"
      }
    ],
    "TriggerPolicy": [
      {
        "document": "1",
        "input": "POST / HTTP/1.1\nHost: cfg.tencentcloudapi.com\nContent-Type: application/json\nX-TC-Action: TriggerPolicy\n<公共请求参数>\n\n{\n    \"TaskId\": 5491,\n    \"Name\": \"触发护栏测试\",\n    \"Content\": \"触发护栏测试内容\",\n    \"TriggerType\": 0\n}",
        "output": "{\n    \"Response\": {\n        \"RequestId\": \"1050e4e3-ef1a-4e2f-b100-c68dfd38fc75\",\n        \"Success\": true,\n        \"TaskId\": 5491\n    }\n}",
        "title": "1"
      }
    ]
  },
  "version": "1.0"
}